#  Copyright 2025 Google LLC
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http:#www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

tools_list:
  - description: Update an existing pet by Id
    inputSchema:
      properties:
        Pet:
          properties:
            category:
              properties:
                id:
                  examples:
                    - 1
                  format: int64
                  type: integer
                name:
                  examples:
                    - Dogs
                  type: string
              type: object
            id:
              examples:
                - 10
              format: int64
              type: integer
            name:
              examples:
                - doggie
              type: string
            photoUrls:
              items:
                type: string
              type: array
            status:
              description: pet status in the store
              enum:
                - available
                - pending
                - sold
              type: string
            tags:
              items:
                properties:
                  id:
                    format: int64
                    type: integer
                  name:
                    type: string
                type: object
              type: array
          required:
            - name
            - photoUrls
          type: object
      type: object
    name: updatePet
    outputSchema:
      properties:
        category:
          properties:
            id:
              examples:
                - 1
              format: int64
              type: integer
            name:
              examples:
                - Dogs
              type: string
          type: object
        id:
          examples:
            - 10
          format: int64
          type: integer
        name:
          examples:
            - doggie
          type: string
        photoUrls:
          items:
            type: string
          type: array
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
          type: array
      required:
        - name
        - photoUrls
      type: object
    title: Update an existing pet
  - description: Add a new pet to the store
    inputSchema:
      properties:
        Pet:
          properties:
            category:
              properties:
                id:
                  examples:
                    - 1
                  format: int64
                  type: integer
                name:
                  examples:
                    - Dogs
                  type: string
              type: object
            id:
              examples:
                - 10
              format: int64
              type: integer
            name:
              examples:
                - doggie
              type: string
            photoUrls:
              items:
                type: string
              type: array
            status:
              description: pet status in the store
              enum:
                - available
                - pending
                - sold
              type: string
            tags:
              items:
                properties:
                  id:
                    format: int64
                    type: integer
                  name:
                    type: string
                type: object
              type: array
          required:
            - name
            - photoUrls
          type: object
      type: object
    name: addPet
    outputSchema:
      properties:
        category:
          properties:
            id:
              examples:
                - 1
              format: int64
              type: integer
            name:
              examples:
                - Dogs
              type: string
          type: object
        id:
          examples:
            - 10
          format: int64
          type: integer
        name:
          examples:
            - doggie
          type: string
        photoUrls:
          items:
            type: string
          type: array
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
          type: array
      required:
        - name
        - photoUrls
      type: object
    title: Add a new pet to the store
  - description: Multiple status values can be provided with comma separated strings
    inputSchema:
      properties:
        status:
          default: available
          enum:
            - available
            - pending
            - sold
          type: string
      type: object
    name: findPetsByStatus
    outputSchema:
      properties:
        result:
          items:
            properties:
              category:
                properties:
                  id:
                    examples:
                      - 1
                    format: int64
                    type: integer
                  name:
                    examples:
                      - Dogs
                    type: string
                type: object
              id:
                examples:
                  - 10
                format: int64
                type: integer
              name:
                examples:
                  - doggie
                type: string
              photoUrls:
                items:
                  type: string
                type: array
              status:
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
                type: string
              tags:
                items:
                  properties:
                    id:
                      format: int64
                      type: integer
                    name:
                      type: string
                  type: object
                type: array
            required:
              - name
              - photoUrls
            type: object
          type: array
      type: object
    title: Finds Pets by status
  - description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    inputSchema:
      properties:
        tags:
          items:
            type: string
          type: array
      type: object
    name: findPetsByTags
    outputSchema:
      properties:
        result:
          items:
            properties:
              category:
                properties:
                  id:
                    examples:
                      - 1
                    format: int64
                    type: integer
                  name:
                    examples:
                      - Dogs
                    type: string
                type: object
              id:
                examples:
                  - 10
                format: int64
                type: integer
              name:
                examples:
                  - doggie
                type: string
              photoUrls:
                items:
                  type: string
                type: array
              status:
                description: pet status in the store
                enum:
                  - available
                  - pending
                  - sold
                type: string
              tags:
                items:
                  properties:
                    id:
                      format: int64
                      type: integer
                    name:
                      type: string
                  type: object
                type: array
            required:
              - name
              - photoUrls
            type: object
          type: array
      type: object
    title: Finds Pets by tags
  - description: Returns a single pet
    inputSchema:
      properties:
        petId:
          format: int64
          type: integer
      type: object
    name: getPetById
    outputSchema:
      properties:
        category:
          properties:
            id:
              examples:
                - 1
              format: int64
              type: integer
            name:
              examples:
                - Dogs
              type: string
          type: object
        id:
          examples:
            - 10
          format: int64
          type: integer
        name:
          examples:
            - doggie
          type: string
        photoUrls:
          items:
            type: string
          type: array
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
          type: array
      required:
        - name
        - photoUrls
      type: object
    title: Find pet by ID
  - description: ""
    inputSchema:
      properties:
        name:
          type: string
        petId:
          format: int64
          type: integer
        status:
          type: string
      type: object
    name: updatePetWithForm
    title: Updates a pet in the store with form data
  - description: ""
    inputSchema:
      properties:
        api_key:
          type: string
        petId:
          format: int64
          type: integer
      type: object
    name: deletePet
    title: Deletes a pet
  - description: ""
    inputSchema:
      properties:
        additionalMetadata:
          type: string
        petId:
          format: int64
          type: integer
        uploadFileBody:
          format: binary
          type: string
      type: object
    name: uploadFile
    outputSchema:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        type:
          type: string
      type: object
    title: uploads an image
  - description: Returns a map of status codes to quantities
    inputSchema:
      properties: {}
      type: object
    name: getInventory
    outputSchema:
      additionalProperties:
        format: int32
        type: integer
      type: object
    title: Returns pet inventories by status
  - description: Place a new order in the store
    inputSchema:
      properties:
        Order:
          properties:
            complete:
              type: boolean
            id:
              examples:
                - 10
              format: int64
              type: integer
            petId:
              examples:
                - 198772
              format: int64
              type: integer
            quantity:
              examples:
                - 7
              format: int32
              type: integer
            shipDate:
              format: date-time
              type: string
            status:
              description: Order Status
              enum:
                - placed
                - approved
                - delivered
              examples:
                - approved
              type: string
          type: object
      type: object
    name: placeOrder
    outputSchema:
      properties:
        complete:
          type: boolean
        id:
          examples:
            - 10
          format: int64
          type: integer
        petId:
          examples:
            - 198772
          format: int64
          type: integer
        quantity:
          examples:
            - 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          examples:
            - approved
          type: string
      type: object
    title: Place an order for a pet
  - description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
    inputSchema:
      properties:
        orderId:
          format: int64
          type: integer
      type: object
    name: getOrderById
    outputSchema:
      properties:
        complete:
          type: boolean
        id:
          examples:
            - 10
          format: int64
          type: integer
        petId:
          examples:
            - 198772
          format: int64
          type: integer
        quantity:
          examples:
            - 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          examples:
            - approved
          type: string
      type: object
    title: Find purchase order by ID
  - description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
    inputSchema:
      properties:
        orderId:
          format: int64
          type: integer
      type: object
    name: deleteOrder
    title: Delete purchase order by ID
  - description: This can only be done by the logged in user.
    inputSchema:
      properties:
        User:
          properties:
            email:
              examples:
                - john@email.com
              type: string
            firstName:
              examples:
                - John
              type: string
            id:
              examples:
                - 10
              format: int64
              type: integer
            lastName:
              examples:
                - James
              type: string
            password:
              examples:
                - "12345"
              type: string
            phone:
              examples:
                - "12345"
              type: string
            userStatus:
              description: User Status
              examples:
                - 1
              format: int32
              type: integer
            username:
              examples:
                - theUser
              type: string
          type: object
      type: object
    name: createUser
    outputSchema:
      properties:
        email:
          examples:
            - john@email.com
          type: string
        firstName:
          examples:
            - John
          type: string
        id:
          examples:
            - 10
          format: int64
          type: integer
        lastName:
          examples:
            - James
          type: string
        password:
          examples:
            - "12345"
          type: string
        phone:
          examples:
            - "12345"
          type: string
        userStatus:
          description: User Status
          examples:
            - 1
          format: int32
          type: integer
        username:
          examples:
            - theUser
          type: string
      type: object
    title: Create user
  - description: Creates list of users with given input array
    inputSchema:
      properties:
        createUsersWithListInputBody:
          items:
            properties:
              email:
                examples:
                  - john@email.com
                type: string
              firstName:
                examples:
                  - John
                type: string
              id:
                examples:
                  - 10
                format: int64
                type: integer
              lastName:
                examples:
                  - James
                type: string
              password:
                examples:
                  - "12345"
                type: string
              phone:
                examples:
                  - "12345"
                type: string
              userStatus:
                description: User Status
                examples:
                  - 1
                format: int32
                type: integer
              username:
                examples:
                  - theUser
                type: string
            type: object
          type: array
      type: object
    name: createUsersWithListInput
    outputSchema:
      properties:
        email:
          examples:
            - john@email.com
          type: string
        firstName:
          examples:
            - John
          type: string
        id:
          examples:
            - 10
          format: int64
          type: integer
        lastName:
          examples:
            - James
          type: string
        password:
          examples:
            - "12345"
          type: string
        phone:
          examples:
            - "12345"
          type: string
        userStatus:
          description: User Status
          examples:
            - 1
          format: int32
          type: integer
        username:
          examples:
            - theUser
          type: string
      type: object
    title: Creates list of users with given input array
  - description: ""
    inputSchema:
      properties:
        password:
          type: string
        username:
          type: string
      type: object
    name: loginUser
    outputSchema:
      properties:
        result:
          type: string
      type: object
    title: Logs user into the system
  - description: ""
    inputSchema:
      properties: {}
      type: object
    name: logoutUser
    title: Logs out current logged in user session
  - description: ""
    inputSchema:
      properties:
        username:
          type: string
      type: object
    name: getUserByName
    outputSchema:
      properties:
        email:
          examples:
            - john@email.com
          type: string
        firstName:
          examples:
            - John
          type: string
        id:
          examples:
            - 10
          format: int64
          type: integer
        lastName:
          examples:
            - James
          type: string
        password:
          examples:
            - "12345"
          type: string
        phone:
          examples:
            - "12345"
          type: string
        userStatus:
          description: User Status
          examples:
            - 1
          format: int32
          type: integer
        username:
          examples:
            - theUser
          type: string
      type: object
    title: Get user by user name
  - description: This can only be done by the logged in user.
    inputSchema:
      properties:
        User:
          properties:
            email:
              examples:
                - john@email.com
              type: string
            firstName:
              examples:
                - John
              type: string
            id:
              examples:
                - 10
              format: int64
              type: integer
            lastName:
              examples:
                - James
              type: string
            password:
              examples:
                - "12345"
              type: string
            phone:
              examples:
                - "12345"
              type: string
            userStatus:
              description: User Status
              examples:
                - 1
              format: int32
              type: integer
            username:
              examples:
                - theUser
              type: string
          type: object
        username:
          type: string
      type: object
    name: updateUser
    title: Update user
  - description: This can only be done by the logged in user.
    inputSchema:
      properties:
        username:
          type: string
      type: object
    name: deleteUser
    title: Delete user
tools_targets:
  addPet:
    accept: application/json
    contentType: application/json
    headerParams: []
    pathParams: []
    pathSuffix: /pet
    payloadParam: Pet
    payloadSchema:
      properties:
        category:
          properties:
            id:
              example: 1
              format: int64
              type: integer
            name:
              example: Dogs
              type: string
          type: object
          xml:
            name: category
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
            xml:
              name: tag
          type: array
          xml:
            wrapped: true
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    queryParams: []
    responseSchema:
      properties:
        category:
          properties:
            id:
              example: 1
              format: int64
              type: integer
            name:
              example: Dogs
              type: string
          type: object
          xml:
            name: category
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
            xml:
              name: tag
          type: array
          xml:
            wrapped: true
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    verb: POST
  createUser:
    accept: ""
    contentType: application/json
    headerParams: []
    pathParams: []
    pathSuffix: /user
    payloadParam: User
    payloadSchema:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
    queryParams: []
    responseSchema:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
    verb: POST
  createUsersWithListInput:
    accept: application/json
    contentType: application/json
    headerParams: []
    pathParams: []
    pathSuffix: /user/createWithList
    payloadParam: createUsersWithListInputBody
    payloadSchema:
      items:
        properties:
          email:
            example: john@email.com
            type: string
          firstName:
            example: John
            type: string
          id:
            example: 10
            format: int64
            type: integer
          lastName:
            example: James
            type: string
          password:
            example: "12345"
            type: string
          phone:
            example: "12345"
            type: string
          userStatus:
            description: User Status
            example: 1
            format: int32
            type: integer
          username:
            example: theUser
            type: string
        type: object
        xml:
          name: user
      type: array
    queryParams: []
    responseSchema:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
    verb: POST
  deleteOrder:
    accept: ""
    contentType: ""
    headerParams: []
    pathParams:
      - orderId
    pathSuffix: /store/order/{orderId}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema: null
    verb: DELETE
  deletePet:
    accept: ""
    contentType: ""
    headerParams:
      - api_key
    pathParams:
      - petId
    pathSuffix: /pet/{petId}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema: null
    verb: DELETE
  deleteUser:
    accept: ""
    contentType: ""
    headerParams: []
    pathParams:
      - username
    pathSuffix: /user/{username}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema: null
    verb: DELETE
  findPetsByStatus:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams: []
    pathSuffix: /pet/findByStatus
    payloadParam: ""
    payloadSchema: {}
    queryParams:
      - status
    responseSchema:
      items:
        properties:
          category:
            properties:
              id:
                example: 1
                format: int64
                type: integer
              name:
                example: Dogs
                type: string
            type: object
            xml:
              name: category
          id:
            example: 10
            format: int64
            type: integer
          name:
            example: doggie
            type: string
          photoUrls:
            items:
              type: string
              xml:
                name: photoUrl
            type: array
            xml:
              wrapped: true
          status:
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
            type: string
          tags:
            items:
              properties:
                id:
                  format: int64
                  type: integer
                name:
                  type: string
              type: object
              xml:
                name: tag
            type: array
            xml:
              wrapped: true
        required:
          - name
          - photoUrls
        type: object
        xml:
          name: pet
      type: array
    verb: GET
  findPetsByTags:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams: []
    pathSuffix: /pet/findByTags
    payloadParam: ""
    payloadSchema: {}
    queryParams:
      - tags
    responseSchema:
      items:
        properties:
          category:
            properties:
              id:
                example: 1
                format: int64
                type: integer
              name:
                example: Dogs
                type: string
            type: object
            xml:
              name: category
          id:
            example: 10
            format: int64
            type: integer
          name:
            example: doggie
            type: string
          photoUrls:
            items:
              type: string
              xml:
                name: photoUrl
            type: array
            xml:
              wrapped: true
          status:
            description: pet status in the store
            enum:
              - available
              - pending
              - sold
            type: string
          tags:
            items:
              properties:
                id:
                  format: int64
                  type: integer
                name:
                  type: string
              type: object
              xml:
                name: tag
            type: array
            xml:
              wrapped: true
        required:
          - name
          - photoUrls
        type: object
        xml:
          name: pet
      type: array
    verb: GET
  getInventory:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams: []
    pathSuffix: /store/inventory
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema:
      additionalProperties:
        format: int32
        type: integer
      type: object
    verb: GET
  getOrderById:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams:
      - orderId
    pathSuffix: /store/order/{orderId}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema:
      properties:
        complete:
          type: boolean
        id:
          example: 10
          format: int64
          type: integer
        petId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
          type: string
      type: object
      xml:
        name: order
    verb: GET
  getPetById:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams:
      - petId
    pathSuffix: /pet/{petId}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema:
      properties:
        category:
          properties:
            id:
              example: 1
              format: int64
              type: integer
            name:
              example: Dogs
              type: string
          type: object
          xml:
            name: category
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
            xml:
              name: tag
          type: array
          xml:
            wrapped: true
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    verb: GET
  getUserByName:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams:
      - username
    pathSuffix: /user/{username}
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
    verb: GET
  loginUser:
    accept: application/json
    contentType: ""
    headerParams: []
    pathParams: []
    pathSuffix: /user/login
    payloadParam: ""
    payloadSchema: {}
    queryParams:
      - username
      - password
    responseSchema:
      type: string
    verb: GET
  logoutUser:
    accept: ""
    contentType: ""
    headerParams: []
    pathParams: []
    pathSuffix: /user/logout
    payloadParam: ""
    payloadSchema: {}
    queryParams: []
    responseSchema: null
    verb: GET
  placeOrder:
    accept: application/json
    contentType: application/json
    headerParams: []
    pathParams: []
    pathSuffix: /store/order
    payloadParam: Order
    payloadSchema:
      properties:
        complete:
          type: boolean
        id:
          example: 10
          format: int64
          type: integer
        petId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
          type: string
      type: object
      xml:
        name: order
    queryParams: []
    responseSchema:
      properties:
        complete:
          type: boolean
        id:
          example: 10
          format: int64
          type: integer
        petId:
          example: 198772
          format: int64
          type: integer
        quantity:
          example: 7
          format: int32
          type: integer
        shipDate:
          format: date-time
          type: string
        status:
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
          example: approved
          type: string
      type: object
      xml:
        name: order
    verb: POST
  updatePet:
    accept: application/json
    contentType: application/json
    headerParams: []
    pathParams: []
    pathSuffix: /pet
    payloadParam: Pet
    payloadSchema:
      properties:
        category:
          properties:
            id:
              example: 1
              format: int64
              type: integer
            name:
              example: Dogs
              type: string
          type: object
          xml:
            name: category
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
            xml:
              name: tag
          type: array
          xml:
            wrapped: true
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    queryParams: []
    responseSchema:
      properties:
        category:
          properties:
            id:
              example: 1
              format: int64
              type: integer
            name:
              example: Dogs
              type: string
          type: object
          xml:
            name: category
        id:
          example: 10
          format: int64
          type: integer
        name:
          example: doggie
          type: string
        photoUrls:
          items:
            type: string
            xml:
              name: photoUrl
          type: array
          xml:
            wrapped: true
        status:
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
          type: string
        tags:
          items:
            properties:
              id:
                format: int64
                type: integer
              name:
                type: string
            type: object
            xml:
              name: tag
          type: array
          xml:
            wrapped: true
      required:
        - name
        - photoUrls
      type: object
      xml:
        name: pet
    verb: PUT
  updatePetWithForm:
    accept: ""
    contentType: ""
    headerParams: []
    pathParams:
      - petId
    pathSuffix: /pet/{petId}
    payloadParam: ""
    payloadSchema: {}
    queryParams:
      - name
      - status
    responseSchema: null
    verb: POST
  updateUser:
    accept: ""
    contentType: application/json
    headerParams: []
    pathParams:
      - username
    pathSuffix: /user/{username}
    payloadParam: User
    payloadSchema:
      properties:
        email:
          example: john@email.com
          type: string
        firstName:
          example: John
          type: string
        id:
          example: 10
          format: int64
          type: integer
        lastName:
          example: James
          type: string
        password:
          example: "12345"
          type: string
        phone:
          example: "12345"
          type: string
        userStatus:
          description: User Status
          example: 1
          format: int32
          type: integer
        username:
          example: theUser
          type: string
      type: object
      xml:
        name: user
    queryParams: []
    responseSchema: null
    verb: PUT
  uploadFile:
    accept: application/json
    contentType: application/octet-stream
    headerParams: []
    pathParams:
      - petId
    pathSuffix: /pet/{petId}/uploadImage
    payloadParam: uploadFileBody
    payloadSchema:
      format: binary
      type: string
    queryParams:
      - additionalMetadata
    responseSchema:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
        type:
          type: string
      type: object
      xml:
        name: '##default'
    verb: POST
