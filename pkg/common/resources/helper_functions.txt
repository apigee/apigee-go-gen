    include(template string, data any)
        Render a pre-defined template, e.g.

          {{ include "greet" "Miguel" }}

        The template must be defined ahead of time with a "define" block, e.g.

          {{- define "greet" -}}
            {{- $name := . -}}
            Hello {{ $name }} !
          {{- end -}}

        You can also use this function to render an existing file. e.g.

          {{ include "./path/to/file.yaml" . }}

    os_writefile(dest string, content string)
        Write a file to the output directory
        e.g. {{ os_writefile "./dst/filename.txt" "contents" }}

        The destination path is relative to the output directory.
        ( ".." or absolute paths are not allowed)

        This function outputs the destination file path.

    os_copyfile(dest string, src string) string
        Copies files to the output directory
        e.g. {{ os_copyfile "./dest/lib.jar" "./src/lib.jar" }}

        The destination path is relative to the output directory
        ( ".." or absolute paths are not allowed)

        The source path is relative to the main template file directory
        ( ".." or absolute paths are not allowed)

        This function outputs the destination file path

    os_getenvs() map[string]string
        Gets all environment variables as a dictionary
        e.g. {{ $envs := os_getenvs }}

    os_getenv(env string) string
        Gets the value of the specified env var
        e.g.  {{ os_getenv "USER" }}

    slug_make(in string) string
        Converts string to a slug
        e.g. {{ slug_maek "My API proxy" }} outputs "my-api-proxy"

    url_parse(url string) net.URL
        Parse a URL into its parts
        e.g. {{ $url := url_parse "https://example.com/foo/bar" }}

        This function outputs a net.URL object (see https://pkg.go.dev/net/url#URL)

    blank() string
        Outputs empty string.
        e.g. {{ os_writefile "./dest/file" "foo" | blank }}

        This is useful to consume the output of another function.

    deref(*any) any
        Dereferences the input pointer.

    fmt_printf(pattern string, args ... string)
        Write to stdout during the rendering process
        e.g. {{ fmt_printf "Hello World\n" }}

        This function is useful for so called "printf" debugging.

        For example, you can use it to trace the template rendering as it runs.
        You can also use it to dump values to stdout in order to see the contents.
        e.g. {{ fmt_printf "url: %%v\n" $url }}

    remove_oas_extensions(src string) string
        Removes the OpenAPI Description extensions from the file specified by src
        The file must already exist in the output directory

        This is useful if to make the OAS Description files small within the generated bundles
        e.g.
          {{ os_writefile "./openapi.yaml" $.Values.spec_string }}
          {{ remove_oas_extensions "./openapi.yaml" }}

    oas3_to_mcp(file string) map[string]any
        Extracts MCP metadata from an OpenAPI 3.x description

        The result contains 'tools_list' and 'tools_targets' sections.

        - The 'tools_list' is an array that can be used for MCP tools/list response.
        - The 'tools_targets' is a map with information useful for transcoding MCP tool/calls to REST.

        e.g.
           {{ $mcpValues := oas3_to_mcp "./path/to/openapi.yaml" }}

        The file path is relative to the main template file directory.

        {
          # A list of tool definitions.
          tools_list: [
            {
              name: "...",                          # The unique operationId
              title: "...",                         # The operation summary.
              description: "...",                   # The operation description.
              inputSchema: { ... },                 # JSON Schema with all query, header, path and the request body
              outputSchema: { ... },                # JSON Schema for the successful response body.
            },
            ...
          ],

          # A map of tool targets
          tools_targets: {
            [tool_name]: {                          # The unique operationId
              verb: "...",                          # The target API HTTP method (e.g., "GET", "POST").
              pathSuffix: "...",                    # The target API path template (e.g., "/users/{userId}").
              contentType: "...",                   # The Content-Type header to sent to target
              accept: "..."                         # The Accept header to send to target
              pathParams: ["...", ... ],            # List of target path parameter names.
              queryParams ["...", ... ],            # List of target query parameter names.
              headerParams: ["...", ... ],          # List of target header parameter names.
              payloadParam: "...",                  # Name of the payload parameter used for the request body.
              payloadSchema: { ... },               # JSON Schema for the target request body
              responseSchema: { ... }               # JSON Schema for the target response body
            }
          }
        }

    Sprig
      Template functions from Sprig library
      e.g. {{ "Hello World" | upper }}

      The sprig library contains a lot of useful functions.
      See the full docs at: https://masterminds.github.io/sprig