Description:

  This tool renders a template using a gRPC protobuf as input

  The rendering context includes the following data:

  struct {
    Proto descriptorpb.FileDescriptorProto
    ProtoStr string
    Values map[string]any
  }

  * The Proto field contains parsed info about the input proto file.
  * The ProtoStr field contains the proto file as a string
  * The Values field contains any value set with --set or --set-string


  See: https://pkg.go.dev/google.golang.org/protobuf/types/descriptorpb#FileDescriptorProto

  From your template, you can access data in the context with "$."

  e.g.
     Package Name: {{ $.Proto.Package }}

     Service Name: {{ (index $.Proto.Service 0 ).Name }}


  Helper functions:
%[2]s

Example 1 (simple):
 %[1]s -template apiproxy.tmpl \
       -proto ./greeter.proto \
       -set-string "target_server=grpc-target-server" \
       -output ./out/greeter/apiproxy.yaml

Example 2 (with one include):
 %[1]s -template apiproxy.tmpl \
       -proto ./greeter.proto \
       -set-string "target_server=grpc-target-server" \
       -include ./helpers.tpl \
       -output ./out/greeter/apiproxy.yaml

Example 3 (with multiple includes):
 %[1]s -template apiproxy.tmpl \
       -proto ./greeter.proto \
       -set-string "target_server=grpc-target-server" \
       -include ./helper1.tpl \
       -include ./helper2.tpl \
       -output ./out/greeter/apiproxy.yaml

Example 4 (with glob include):
 %[1]s -template apiproxy.tmpl \
       -proto ./greeter.proto \
       -include './helpers/*.tpl' \
       -output ./out/greeter/apiproxy.yaml

Flags:
