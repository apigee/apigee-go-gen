Description:

  This tool renders a template using a GraphQL schema as input

  The rendering context includes the following data:

  struct {
    Schema ast.Schema
    SchemaStr string
    Values map[string]any
  }

  * The GraphQL field contains an AST representation of the schema.
  * The GraphQLStr field contains the schema as a string
  * The Values field contains any value set with --set or --set-string


  See: https://pkg.go.dev/github.com/vektah/gqlparser/v2/ast#Schema

  From your template, you can access data in the context with "$."

  e.g.
     {{ $.GraphQLStr }}
     {{ $.Schema.Description }}

  Helper functions:
%[2]s

Example 1 (simple):
 %[1]s -template apiapiproxy.tmpl \
       -schema ./resorts.yaml \
       -set-string name=resorts-api \
       -set-string "target_url=https://example.com/graphql" \
       -output ./out/resorts/apiproxy.yaml

Example 2 (with one include):
 %[1]s -template apiproxy.tmpl \
       -schema ./resorts.graphql \
       -set-string "name=resorts-api" \
       -set-string "base_path=/graphql" \
       -set-string "target_url=https://example.com/graphql" \
       -include ./helpers.tpl \
       -output ./out/resorts/apiproxy.yaml

Example 3 (with multiple includes):
 %[1]s -template apiproxy.tmpl \
       -schema ./resorts.graphql \
       -set-string "name=resorts-api" \
       -set-string "base_path=/graphql" \
       -set-string "target_url=https://example.com/graphql" \
       -include ./helper1.tpl \
       -include ./helper2.tpl \
       -output ./out/resorts/apiproxy.yaml

Example 4 (with glob include):
 %[1]s -template apiproxy.tmpl \
       -schema ./resorts.graphql \
       -set-string "name=resorts-api" \
       -set-string "base_path=/graphql" \
       -set-string "target_url=https://example.com/graphql" \
       -include './helpers/*.tpl' \
       -output ./out/resorts/apiproxy.yaml

Flags:
